{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","inputValue","selectValue","filtredArrayByValue","props","todos","filter","todo","title","includes","filtredArrayBySelect","value","completed","className","this","onChange","event","setState","target","map","key","id","classnames","type","checked","readOnly","onClick","selectedUser","userId","selectedUserId","React","Component","defaultProps","PropTypes","arrayOf","shape","getData","url","fetch","then","response","ok","json","Promise","reject","Error","data","catch","error","alert","getUser","CurrentUser","user","a","prevProps","name","email","phone","clearUser","style","maxWidth","margin","display","alt","src","App","selectUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c786c6d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\nimport classnames from 'classnames';\n\nclass TodoList extends React.Component {\n  state = {\n    inputValue: '',\n    selectValue: 'all',\n  }\n\n  filtredArrayByValue = () => this.props.todos\n    .filter(todo => todo.title && todo.title.includes(this.state.inputValue))\n\n  filtredArrayBySelect = (value) => {\n    if (value === 'all') {\n      return this.filtredArrayByValue();\n    }\n\n    return this.filtredArrayByValue()\n      .filter(todo => (value === 'completed'\n        ? todo.completed\n        : !todo.completed));\n  }\n\n  render() {\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <input\n            className=\"input\"\n            value={this.state.inputValue}\n            onChange={(event) => {\n              this.setState({ inputValue: event.target.value });\n            }}\n          />\n          <select\n            onChange={(event) => {\n              this.setState({ selectValue: event.target.value });\n            }}\n          >\n            <option value=\"all\">\n              All\n            </option>\n            <option value=\"active\">\n              Active\n            </option>\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n\n          <ul className=\"TodoList__list\">\n            {this.filtredArrayBySelect(this.state.selectValue).map(todo => (\n              <li\n                key={todo.id}\n                className={classnames(\n                  'TodoList__item', {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  },\n                )\n              }\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  onClick={() => this.props.selectedUser(todo.userId)}\n                  className={classnames(\n                    'TodoList__user-button',\n                    'button',\n                    {\n                      'TodoList__user-button--selected':\n                       todo.userId === this.props.selectedUserId,\n                    },\n                  )}\n                  type=\"button\"\n                >\n                  {todo.userId}\n                  #\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nTodoList.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  selectedUser: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    userId: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    id: PropTypes.number,\n  })),\n};\n\nTodoList.defaultProps = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: null,\n    completed: false,\n    title: null,\n    userId: null,\n  })),\n};\n\nexport default TodoList;\n\n// (\n//   <div className=\"TodoList\">\n//     <h2>Todos:</h2>\n\n//     <div className=\"TodoList__list-container\">\n//       <ul className=\"TodoList__list\">\n//         <li className=\"TodoList__item TodoList__item--unchecked\">\n//           <label>\n//             <input type=\"checkbox\" readOnly />\n//             <p>delectus aut autem</p>\n//           </label>\n\n//           <button\n//             className=\"\n//               TodoList__user-button\n//               TodoList__user-button--selected\n//               button\n//             \"\n//             type=\"button\"\n//           >\n//             User&nbsp;#1\n//           </button>\n//         </li>\n\n//         <li className=\"TodoList__item TodoList__item--checked\">\n//           <label>\n//             <input type=\"checkbox\" checked readOnly />\n//             <p>distinctio vitae autem nihil ut molestias quo</p>\n//           </label>\n\n//           <button\n//             className=\"TodoList__user-button button\"\n//             type=\"button\"\n//           >\n//             User&nbsp;#2\n//           </button>\n//         </li>\n//       </ul>\n//     </div>\n//   </div>\n// );\n","const todosUrl = 'https://mate-api.herokuapp.com/todos';\nconst userUrl = 'https://mate-api.herokuapp.com/users';\n\nconst getData = url => fetch(url)\n  .then((response) => {\n    if (!response.ok) {\n      return Promise.reject(new Error('Somthimg going wrong'));\n    }\n\n    return response.json();\n  })\n  .then(response => response.data)\n  .catch((error) => {\n    alert.error('Error', error);\n  });\n\nexport function getTodos() {\n  return getData(todosUrl);\n}\n\nexport function getUser(id) {\n  return getData(`${userUrl}/${id}`);\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends Component {\n  state = {\n    user: 0,\n  };\n\n  async componentDidMount() {\n    const { userId } = this.props;\n    const user = await getUser(userId);\n\n    this.setState({ user });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    getUser(this.props.userId)\n      .then(user => this.setState({ user }));\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <img\n          style={{\n            maxWidth: '40px',\n            margin: '0 auto',\n            display: 'block',\n          }}\n          alt=\"Loading\"\n          src=\"https://acegif.com/wp-content/uploads/loading-96.gif\"\n        />\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${user.id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          className=\"CurrentUser__clear\"\n          type=\"button\"\n          onClick={this.props.clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport TodoList from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({\n      todos,\n    });\n  }\n\n  selectUser = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUser={this.selectUser}\n            selectedUserId={this.state.selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}